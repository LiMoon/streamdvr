export default abstract class Site {
    protected siteName: string;
    protected padName: string;
    protected listName: string;
    protected cfgFile: string;
    protected updateName: string;
    protected tempList: Array<any>;
    protected streamerList: Map<any, any>;
    protected redrawList: boolean;
    protected paused: boolean;
    protected dvr: any;
    protected tui: any;
    protected config: any;
    constructor(siteName: string, dvr: any, tui: any);
    protected abstract togglePause(streamer: any, options: any): boolean;
    getStreamerList(): any[];
    protected getFileName(nm: string): string;
    protected checkFileSize(): void;
    connect(): void;
    disconnect(): void;
    protected getCaptureArguments(url: string, filename: string, options?: any): string[];
    processUpdates(options: any): Promise<void>;
    protected abstract createListItem(id: any): void;
    protected updateList(id: any, options: any): Promise<boolean>;
    pause(): void;
    protected updateStreamers(list: Array<any>, options: any): Promise<boolean>;
    protected addStreamer(id: any, list: Array<any>, options: any): boolean;
    protected removeStreamer(id: any, list: Array<any>): boolean;
    protected checkStreamerState(streamer: any, options: any): Promise<void>;
    getStreamers(options?: any): Promise<boolean>;
    storeCapInfo(streamer: any, filename: string, capture: any, isPostProcess: boolean): void;
    getNumCapsInProgress(): number;
    haltAllCaptures(): void;
    protected haltCapture(uid: any): void;
    protected writeConfig(): Promise<void>;
    protected abstract setupCapture(streamer: any, url: any): any;
    protected canStartCap(uid: any): boolean;
    getCompleteDir(streamer: any): Promise<any>;
    protected refresh(streamer: any, options: any): Promise<void>;
    protected startCapture(capInfo: any): void;
    protected endCapture(streamer: any, capInfo: any): void;
    clearProcessing(streamer: any): void;
    protected render(redrawList: boolean): void;
    infoMsg(msg: string): void;
    errMsg(msg: string): void;
    dbgMsg(msg: string): void;
}
